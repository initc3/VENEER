#include <iostream>
#include <algorithm>
#include <cmath>
#include <cassert>
#include "Complex.h"
#include "FFT.h"
using namespace std;

#ifdef MEASURE_COMPUTATION
int cnt_FFT = 0;
#endif

//const double PI = 3.14159265358979323846264338327950288;

FP sin_d[] = {
FP :: from(0.0000000000000000000000000000000000000000000000000000000000),
FP :: from(1.0000000000000000000000000000000000000000000000000000000000),
FP :: from(0.7071067811865474617150084668537601828575134277343750000000),
FP :: from(0.3826834323650897817792326804919866845011711120605468750000),
FP :: from(0.1950903220161282480837883213098393753170967102050781250000),
FP :: from(0.0980171403295606036287779261328978464007377624511718750000),
FP :: from(0.0490676743274180149345653489945107139647006988525390625000),
FP :: from(0.0245412285229122881236030195850617019459605216979980468750),
FP :: from(0.0122715382857199253874291855481715174391865730285644531250),
FP :: from(0.0061358846491544752690949771078976482385769486427307128906),
FP :: from(0.0030679567629659761432425746363605867372825741767883300781),
FP :: from(0.0015339801862847655001403923691327690903563052415847778320),
FP :: from(0.0007669903187427044854995727973800967447459697723388671875),
FP :: from(0.0003834951875713955632071772150482047436526045203208923340),
FP :: from(0.0001917475973107032915284525520505098938883747905492782593),
FP :: from(0.0000958737990959773446692296361426599560218164697289466858),
FP :: from(0.0000479368996030668813096084490688042478723218664526939392),
FP :: from(0.0000239684498084182193177772701719874248738051392138004303),
FP :: from(0.0000119842249050697052976943712820911969174630939960479736),
FP :: from(0.0000059921124526424275272143762927079535529628628864884377),
FP :: from(0.0000029960562263346608351613237913868559303409710992127657),
FP :: from(0.0000014980281131690111427062512411412242840924591291695833),
FP :: from(0.0000007490140565847157414031630938422434695667107007466257),
FP :: from(0.0000003745070282923841287229464302316328527808764192741364),
FP :: from(0.0000001872535141461953466141438255296303161401283432496712),
FP :: from(0.0000000936267570730980835886557390665418942887754383264109),
FP :: from(0.0000000468133785365490881164421725028207399432744750811253),
FP :: from(0.0000000234066892682745506756659866756317689429067741002655),
FP :: from(0.0000000117033446341372769921942184438712342142707711900584),
FP :: from(0.0000000058516723170686384960971092219356171071353855950292),
FP :: from(0.0000000029258361585343192480485546109678085535676927975146),
FP :: from(0.0000000014629180792671596240242773054839042767838463987573),
};

FP cos_d[] = {
FP :: from(-1.0000000000000000000000000000000000000000000000000000000000),
FP :: from(0.0000000000000000612323399573676603586882014729198302312846),
FP :: from(0.7071067811865475727373109293694142252206802368164062500000),
FP :: from(0.9238795325112867384831361050601117312908172607421875000000),
FP :: from(0.9807852804032304305792422383092343807220458984375000000000),
FP :: from(0.9951847266721969287317506314138881862163543701171875000000),
FP :: from(0.9987954562051724050064649418345652520656585693359375000000),
FP :: from(0.9996988186962042499672520534659270197153091430664062500000),
FP :: from(0.9999247018391445029905639785283710807561874389648437500000),
FP :: from(0.9999811752826011090888869148329831659793853759765625000000),
FP :: from(0.9999952938095761911796444110223092138767242431640625000000),
FP :: from(0.9999988234517018792502085489104501903057098388671875000000),
FP :: from(0.9999997058628822266257429873803630471229553222656250000000),
FP :: from(0.9999999264657178921211766464693937450647354125976562500000),
FP :: from(0.9999999816164293342524160834727808833122253417968750000000),
FP :: from(0.9999999954041073335631040208681952208280563354492187500000),
FP :: from(0.9999999988510268611463516208459623157978057861328125000000),
FP :: from(0.9999999997127566597754366739536635577678680419921875000000),
FP :: from(0.9999999999281892204550103997462429106235504150390625000000),
FP :: from(0.9999999999820472496026013686787337064743041992187500000000),
FP :: from(0.9999999999955118124006503421696834266185760498046875000000),
FP :: from(0.9999999999988780086113138168002478778362274169921875000000),
FP :: from(0.9999999999997194466416772229422349482774734497070312500000),
FP :: from(0.9999999999999298339048436901066452264785766601562500000000),
FP :: from(0.9999999999999824584762109225266613066196441650390625000000),
FP :: from(0.9999999999999956701302039618894923478364944458007812500000),
FP :: from(0.9999999999999988897769753748434595763683319091796875000000),
FP :: from(0.9999999999999997779553950749686919152736663818359375000000),
FP :: from(0.9999999999999998889776975374843459576368331909179687500000),
FP :: from(1.0000000000000000000000000000000000000000000000000000000000),
FP :: from(1.0000000000000000000000000000000000000000000000000000000000),
FP :: from(1.0000000000000000000000000000000000000000000000000000000000),
};

void DFT(Complex P[], int n, int oper) {
#ifdef MEASURE_COMPUTATION
	++cnt_FFT;
#endif
	for (int i = 1, j = 0; i < n - 1; i++) {
		for (int s = n; j ^= s >>= 1, ~j & s; );
		if (i < j) swap(P[i], P[j]);
	}
	for (int d = 0; (1 << d) < n; d++) {
		int m = 1 << d, m2 = m * 2;
//		float p0 = PI / m * oper;
		FP my_sin = sin_d[d];
		FP my_cos = cos_d[d];
		if (oper < 0)
			my_sin = -my_sin;
		Complex unit_p0(my_cos, my_sin);
		for (int i = 0; i < n; i += m2) {
			Complex unit(FP :: from(1.0), FP :: from(0.0));
			for (int j = 0; j < m; j++) {
				Complex &P1 = P[i + j + m], &P2 = P[i + j];
				Complex t = mul(unit, P1);
				P1 = Complex(P2.x - t.x, P2.y - t.y);
				P2 = Complex(P2.x + t.x, P2.y + t.y);
				unit = mul(unit, unit_p0);
			}
		}
		
	}
}


